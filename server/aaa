const express = require('express');
const cors = require('cors');
const fs = require('fs');
const app = express();
const port = 5000;

app.use(cors());
app.use(express.json());

let data = JSON.parse(fs.readFileSync('data.json'));

app.get('/data', (req, res) => {
  res.json(data);
});

app.get('/bin', (req, res) => {
  const { group_id, wrack_id, bin_id } = req.query;
  const group = data.find(g => g.Group_id === group_id);
  if (group) {
    const wrack = group.WRacks.find(w => w.WRack_id === wrack_id);
    if (wrack) {
      const bin = wrack.bins.find(b => b.bin_id === bin_id);
      if (bin) {
        res.json(bin);
      } else {
        res.status(404).send('Bin not found');
      }
    } else {
      res.status(404).send('Wrack not found');
    }
  } else {
    res.status(404).send('Group not found');
  }
});

app.put('/bin/update/schedule', (req, res) => {
  const { group_id, wrack_id, bin_id, scheduled_index, current_enabled_status } = req.body;
  const group = data.find(g => g.Group_id === group_id);
  if (group) {
    const wrack = group.WRacks.find(w => w.WRack_id === wrack_id);
    if (wrack) {
      const bin = wrack.bins.find(b => b.bin_id === bin_id);
      if (bin) {
        bin.schedules[scheduled_index].enabled = !current_enabled_status;
        fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
        res.json(bin);
      } else {
        res.status(404).send('Bin not found');
      }
    } else {
      res.status(404).send('Wrack not found');
    }
  } else {
    res.status(404).send('Group not found');
  }
});

app.put('/bin/update/color', (req, res) => {
  const { group_id, wrack_id, bin_id, new_color } = req.body;
  const group = data.find(g => g.Group_id === group_id);
  if (group) {
    const wrack = group.WRacks.find(w => w.WRack_id === wrack_id);
    if (wrack) {
      const bin = wrack.bins.find(b => b.bin_id === bin_id);
      if (bin) {
        bin.color = new_color;
        fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
        res.json(bin);
      } else {
        res.status(404).send('Bin not found');
      }
    } else {
      res.status(404).send('Wrack not found');
    }
  } else {
    res.status(404).send('Group not found');
  }
});

app.post('/new/group', (req, res) => {
  const { newGroupId } = req.body;
  data.push({ Group_id: newGroupId, WRacks: [] });
  fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
  res.json(data);
});

app.post('/new/wrack', (req, res) => {
  const { groupId, newWrackId } = req.body;
  const group = data.find(g => g.Group_id === groupId);
  if (group) {
    group.WRacks.push({
      WRack_id: newWrackId,
      bins: Array.from({ length: 4 }, (_, i) => ({
        bin_id: `${newWrackId}_${String(i + 1).padStart(2, '0')}`,
        color: (i % 4) + 1,
        enabled: false,
        clicked: false,
        schedules: [
          { enabled: false, time: '00:00' }
        ]
      }))
    });
    fs.writeFileSync('data.json', JSON.stringify(data, null, 2));
    res.json(group);
  } else {
    res.status(404).send('Group not found');
  }
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
